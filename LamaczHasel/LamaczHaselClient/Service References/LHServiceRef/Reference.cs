//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LamaczHaselClient.LHServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LHServiceRef.ILHService", CallbackContract=typeof(LamaczHaselClient.LHServiceRef.ILHServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILHService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/setPackage")]
        void setPackage(Shared.Package package);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/setPackage")]
        System.Threading.Tasks.Task setPackageAsync(Shared.Package package);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/addClient")]
        void addClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/addClient")]
        System.Threading.Tasks.Task addClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/stop")]
        void stop();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/stop")]
        System.Threading.Tasks.Task stopAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/sendDictionary")]
        void sendDictionary();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/sendDictionary")]
        System.Threading.Tasks.Task sendDictionaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/nextPackage")]
        void nextPackage(Shared.ClientResponse clientResponse);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/nextPackage")]
        System.Threading.Tasks.Task nextPackageAsync(Shared.ClientResponse clientResponse);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/sendResponseWhenAllPasswordsFound")]
        void sendResponseWhenAllPasswordsFound(Shared.ClientResponse clientResponse);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/sendResponseWhenAllPasswordsFound")]
        System.Threading.Tasks.Task sendResponseWhenAllPasswordsFoundAsync(Shared.ClientResponse clientResponse);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILHServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/getPackageCallback")]
        void getPackageCallback(Shared.Package package);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/setDictionaryName")]
        void setDictionaryName(string dictionaryName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/appendDictionaryPart")]
        void appendDictionaryPart(byte[] bytes, int offset, int size);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/activateBtStartWhenAllPasswordsFound")]
        void activateBtStartWhenAllPasswordsFound(double avgProcessingTime);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/showResult")]
        void showResult(Shared.Result result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/nowyCzas")]
        void nowyCzas(double s);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILHService/getClientsCounter")]
        void getClientsCounter(int count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILHServiceChannel : LamaczHaselClient.LHServiceRef.ILHService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LHServiceClient : System.ServiceModel.DuplexClientBase<LamaczHaselClient.LHServiceRef.ILHService>, LamaczHaselClient.LHServiceRef.ILHService {
        
        public LHServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LHServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LHServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LHServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LHServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void setPackage(Shared.Package package) {
            base.Channel.setPackage(package);
        }
        
        public System.Threading.Tasks.Task setPackageAsync(Shared.Package package) {
            return base.Channel.setPackageAsync(package);
        }
        
        public void addClient() {
            base.Channel.addClient();
        }
        
        public System.Threading.Tasks.Task addClientAsync() {
            return base.Channel.addClientAsync();
        }
        
        public void stop() {
            base.Channel.stop();
        }
        
        public System.Threading.Tasks.Task stopAsync() {
            return base.Channel.stopAsync();
        }
        
        public void sendDictionary() {
            base.Channel.sendDictionary();
        }
        
        public System.Threading.Tasks.Task sendDictionaryAsync() {
            return base.Channel.sendDictionaryAsync();
        }
        
        public void nextPackage(Shared.ClientResponse clientResponse) {
            base.Channel.nextPackage(clientResponse);
        }
        
        public System.Threading.Tasks.Task nextPackageAsync(Shared.ClientResponse clientResponse) {
            return base.Channel.nextPackageAsync(clientResponse);
        }
        
        public void sendResponseWhenAllPasswordsFound(Shared.ClientResponse clientResponse) {
            base.Channel.sendResponseWhenAllPasswordsFound(clientResponse);
        }
        
        public System.Threading.Tasks.Task sendResponseWhenAllPasswordsFoundAsync(Shared.ClientResponse clientResponse) {
            return base.Channel.sendResponseWhenAllPasswordsFoundAsync(clientResponse);
        }
    }
}
